package com.company.zalando;

import java.math.BigInteger;
import java.util.Arrays;

/**
 * You have just rolled a dice several times. The N roll results that you remember are described by an array A.
 * However, there are F rolls whose results you have forgotten. The arithmetic mean of all of the roll results
 * (the sum of all the roll results divided by the number of rolls) equals M.
 * What are the possible results of the missing rolls?
 *
 * Write a function:
 * vector<int> solution(vector<int> &A, int F, int M):
 *
 * that, given an array A of length N, an integer F and an integer M, returns an array containing the possible results of the missed rolls.
 * The returned integers should contain M integers from 1 to 6 (valid dice rolls).
 * If such an array does not exist then the function should return [0].
 *
 * Examples:
 *
 *     Given A = [3, 2, 4, 3], F = 2, M = 4, your function should return [6, 6].
 *     Given A= [1, 5, 6], F = 4, M = 3, your function may return [2, 1, 2, 4] or [6, 1, 1, 1] among others.
 *     Given A = [1, 2, 3, 4], F = 4, M = 6, your function should return [0]. It is not possible to obtain such a mean.
 */
public class AmazonOAMissingDiceRolls {
    public static void main(String[] args) {
//        System.out.println(Arrays.toString(solution(new int[] {3, 2, 4, 3},  2,  4)));
//        System.out.println(Arrays.toString(solution(new int[] {1, 5, 6},  4,  3)));
//        System.out.println(Arrays.toString(solution(new int[] {1, 2, 3, 4},  4,  6)));

//        System.out.println(Integer.toBinaryString(21));
//        System.out.println(Integer.parseInt("011100",2));
//
//        Long value = Long.parseLong
//
//        int count = 0;
//        while (value != 0){
//            if(value % 2 == 0){
//                value /= 2;
//                count++;
//            }else {
//                value--;
//                count++;
//            }
//        }
//
//        System.out.println(count);
        test();
    }

    public static void test() {

        BigInteger value = new BigInteger
        System.out.println(value);
        int count = 0;
        BigInteger two = BigInteger.valueOf(2l);
        while (!value.equals(0)){
            if(value.mod(two).equals(BigInteger.ZERO)){
                value = value.divide(two);
                count++;
            }else {
                value = value.subtract(BigInteger.ONE);
                count++;
            }
        }

        System.out.println(count);
    }

    static BigInteger calculateStepsRequired(long number) {
        // Take sign bit
//        BigInteger value = new BigInteger
//        if(value.)
        int bit = number < 0 ? 1 : 0;
        BigInteger result = BigInteger.valueOf(bit);
        for (int i = 0; i < 63; i++) {
            number = number << 1;
            int sign = number < 0 ? 1 : 0;
            bit = (bit + sign) % 2;
            result = result.shiftLeft(1).add(BigInteger.valueOf(bit));
        }
        return result;
    }






    public  static int[] solution(int[] A, int F, int M) {
//        A rolls remembered
//        F rolls forgotten
//        M mean of all the rows
        int totalNumbersOfRolls = A.length + F;
        int sumOfRememberedRolls = 0;
        for (int i : A)sumOfRememberedRolls+=i;
        int sumOfForgottenRolls = (totalNumbersOfRolls * M) - sumOfRememberedRolls;
        if(F > sumOfForgottenRolls || sumOfForgottenRolls/F > 6) return new int[]{0};
        int [] result = new int[F];
        for(int i = 0; i < F; i++){
            result[i] = sumOfForgottenRolls / (F-i);
            sumOfForgottenRolls -= result[i];
        }
        return result;
    }
}
